model_log <- logistic_model(retirees_post)
summary(model_log)
# On the retirees pre-rule dataset
if(bplot){plot_logmodel(retirees_pre)}
model_log <- logistic_model(retirees_pre)
summary(model_log)
# Setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
#============================#
#       Load Libraries       #
#============================#
# Load libaries
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(moderndive)
library(ggrepel)
library(ISLR)
# Read global header file (imports datasets and does initial wrangling)
source(file = "../R/header_D.R")
# Setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
#============================#
#       Load Libraries       #
#============================#
# Load libaries
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(moderndive)
library(ggrepel)
library(ISLR)
# Read global header file (imports datasets and does initial wrangling)
source(file = "../R/header_D.R")
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(knitr)
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(ISLR)
# load helper scripts
source(file = "header.R")
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(knitr)
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(ISLR)
# load helper scripts
source(file = "/R/header.R")
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(knitr)
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(ISLR)
# load helper scripts
source(file = "R/header.R")
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(knitr)
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(ISLR)
# load helper scripts
source(file = "R/header.R")
source(file = "R/presentation.R")
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(knitr)
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(ISLR)
# load helper scripts
source(file = "R/header.R")
source(file = "R/report.R")
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(knitr)
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(ISLR)
# load helper scripts
source(file = "R/header.R")
source(file = "R/report.R")
include_graphics("images/coef.jpeg")
source('~/Developer/group_6/R/report.R')
plotpred1
source('~/Developer/group_6/R/report.R')
plotpred1
if(bplot){grid.arrange(dens_pit, dens_pos, nrow = 2)}
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(knitr)
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(ISLR)
# load helper scripts
source(file = "R/header.R")
source(file = "R/report.R")
if(bplot){grid.arrange(dens_pit, dens_pos, nrow = 2)}
plotpred1
plotpred2
plotpred3
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(knitr)
library(tidyverse)
library(grid)
library(moderndive)
library(gridExtra)
library(patchwork)
library(ISLR)
# load helper scripts
source(file = "R/header.R")
source(file = "R/report.R")
ht <- lm(prop ~ postMoneyball, data = couldabeens_t)
get_regression_table(ht, print = T)
source('~/Developer/group_6/R/report.R')
ht <- lm(prop ~ postMoneyball, data = couldabeens_t)
get_regression_table(ht)
plot_lm4
summary(lm4)
ggplot(data = couldabeens_t, mapping = aes(x = postMoneyball, y = prop)) + geom_boxplot()
summary(ht)
ggplot(data = couldabeens_t, mapping = aes(group = postMoneyball, y = prop)) + geom_boxplot()
summary(ht)
ggplot(data = couldabeens_t, mapping = aes(group = postMoneyball, y = prop)) + geom_boxplot()
summary(ht)
# Setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
#============================#
#       Load Libraries       #
#============================#
# Load libaries
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(moderndive)
library(ggrepel)
library(ISLR)
# Read global header file (imports datasets and does initial wrangling)
source(file = "header.R")
# Setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
#============================#
#       Load Libraries       #
#============================#
# Load libaries
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(moderndive)
library(ggrepel)
library(ISLR)
# Read global header file (imports datasets and does initial wrangling)
source(file = "../R/header_D.R")
View(pit_rkes)
View(pit_ret)
View(find_thresholds)
# Setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
#============================#
#       Load Libraries       #
#============================#
# Load libaries
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(moderndive)
library(boot)
library(ggrepel)
library(ISLR)
# Read global header file (imports datasets and does initial wrangling)
source(file = "../R/header_D.R")
sample_n(pit_ret)
sample_n(pit_ret)
sample_n(pit_ret, size = nrow(pit_ret))
bootstrap_rookies <- function(){
boot_pit_ret <- sample_n(pit_ret, size = nrow(pit_ret))
boot_pos_ret <- sample_n(pos_ret, size = nrow(post_ret))
list(boot_pit_ret, boot_pos_ret)
}
# Accepts a list of bootstrapped rookie datasets and returns couldabeens
couldabeens_bootstrapped <- function(ls_rookies){
# Obtain bootstrapped rookies
pit_rkes <- ls_datasets[[1]]
pos_rkes <- ls_datasets[[2]]
# Get thresholds in each year, then smooth them
pit_thresholds <- find_thresholds(pit_rkes)
pos_thresholds <- find_thresholds(pos_rkes)
# See and record which players cross that year's adjusted threshold from rookie players
pit_ret <- compare_thresholds(pit_ret, pit_thresholds)
pos_ret <- compare_thresholds(pos_ret, pos_thresholds)
# Get couldabeen retirees
couldabeens <- count_cbns(rbind(pit_ret,pos_ret))
# Append threshold for reference
threshold_idx <- data.frame(threshold = rep(sd, nrow(couldabeens)))
couldabeens <- cbind(couldabeens, threshold_idx)
# Append number of retirees that year
couldabeens <- cbind(couldabeens, num_retirees)
# Find and append proportion of couldabeens : retirees
couldabeens <- couldabeens %>% mutate(prop = cbns/retirees)
# Return dataframe
couldabeens
}
# Bootstrap the rookie datasets and return couldabeens
couldabeens_bootstrapped <- function(){
# Obtain bootstrapped rookies
boot_pit_ret <- sample_n(pit_ret, size = nrow(pit_ret))
boot_pos_ret <- sample_n(pos_ret, size = nrow(post_ret))
# Get thresholds in each year
pit_thresholds <- find_thresholds(boot_pit_ret)
pos_thresholds <- find_thresholds(boot_pos_ret)
# See and record which players cross that year's adjusted threshold from rookie players
pit_ret <- compare_thresholds(pit_ret, pit_thresholds)
pos_ret <- compare_thresholds(pos_ret, pos_thresholds)
# Get couldabeen retirees
couldabeens <- count_cbns(rbind(pit_ret,pos_ret))
# Append threshold for reference
threshold_idx <- data.frame(threshold = rep(sd, nrow(couldabeens)))
couldabeens <- cbind(couldabeens, threshold_idx)
# Append number of retirees that year
couldabeens <- cbind(couldabeens, num_retirees)
# Find and append proportion of couldabeens : retirees
couldabeens <- couldabeens %>% mutate(prop = cbns/retirees)
# Return dataframe
couldabeens
}
View(couldabeens)
cbns_B <- couldabeens_bootstrapped()
# Bootstrap the rookie datasets and return couldabeens
couldabeens_bootstrapped <- function(){
# Obtain bootstrapped rookies
boot_pit_rkes <- sample_n(pit_rkes, size = nrow(pit_rkes))
boot_pos_rkes <- sample_n(pos_rkes, size = nrow(pos_rkes))
# Get thresholds in each year
pit_thresholds <- find_thresholds(boot_pit_ret)
pos_thresholds <- find_thresholds(boot_pos_ret)
# See and record which players cross that year's adjusted threshold from rookie players
pit_ret <- compare_thresholds(pit_ret, pit_thresholds)
pos_ret <- compare_thresholds(pos_ret, pos_thresholds)
# Get couldabeen retirees
couldabeens <- count_cbns(rbind(pit_ret,pos_ret))
# Append threshold for reference
threshold_idx <- data.frame(threshold = rep(sd, nrow(couldabeens)))
couldabeens <- cbind(couldabeens, threshold_idx)
# Append number of retirees that year
couldabeens <- cbind(couldabeens, num_retirees)
# Find and append proportion of couldabeens : retirees
couldabeens <- couldabeens %>% mutate(prop = cbns/retirees)
# Return dataframe
couldabeens
}
cbns_B <- couldabeens_bootstrapped()
cbns_B <- couldabeens_bootstrapped()
# Setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
#============================#
#       Load Libraries       #
#============================#
# Load libaries
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(moderndive)
library(boot)
library(ggrepel)
library(ISLR)
# Read global header file (imports datasets and does initial wrangling)
source(file = "../R/header_D.R")
# Bootstrap the rookie datasets and return couldabeens
couldabeens_bootstrapped <- function(){
# Obtain bootstrapped rookies
boot_pit_rkes <- sample_n(pit_rkes, size = nrow(pit_rkes))
boot_pos_rkes <- sample_n(pos_rkes, size = nrow(pos_rkes))
# Get thresholds in each year
pit_thresholds <- find_thresholds(boot_pit_ret)
pos_thresholds <- find_thresholds(boot_pos_ret)
# See and record which players cross that year's adjusted threshold from rookie players
pit_ret <- compare_thresholds(pit_ret, pit_thresholds)
pos_ret <- compare_thresholds(pos_ret, pos_thresholds)
# Get couldabeen retirees
couldabeens <- count_cbns(rbind(pit_ret,pos_ret))
# Append threshold for reference
threshold_idx <- data.frame(threshold = rep(sd, nrow(couldabeens)))
couldabeens <- cbind(couldabeens, threshold_idx)
# Append number of retirees that year
couldabeens <- cbind(couldabeens, num_retirees)
# Find and append proportion of couldabeens : retirees
couldabeens <- couldabeens %>% mutate(prop = cbns/retirees)
# Return dataframe
couldabeens
}
cbns_B <- couldabeens_bootstrapped()
# Bootstrap the rookie datasets and return couldabeens
couldabeens_bootstrapped <- function(){
# Obtain bootstrapped rookies
boot_pit_rkes <- sample_n(pit_rkes, size = nrow(pit_rkes))
boot_pos_rkes <- sample_n(pos_rkes, size = nrow(pos_rkes))
# Get thresholds in each year
pit_thresholds <- find_thresholds(boot_pit_rkes)
pos_thresholds <- find_thresholds(boot_pos_rkes)
# See and record which players cross that year's adjusted threshold from rookie players
pit_ret <- compare_thresholds(pit_ret, pit_thresholds)
pos_ret <- compare_thresholds(pos_ret, pos_thresholds)
# Get couldabeen retirees
couldabeens <- count_cbns(rbind(pit_ret,pos_ret))
# Append threshold for reference
threshold_idx <- data.frame(threshold = rep(sd, nrow(couldabeens)))
couldabeens <- cbind(couldabeens, threshold_idx)
# Append number of retirees that year
couldabeens <- cbind(couldabeens, num_retirees)
# Find and append proportion of couldabeens : retirees
couldabeens <- couldabeens %>% mutate(prop = cbns/retirees)
# Return dataframe
couldabeens
}
cbns_B <- couldabeens_bootstrapped()
# Bootstrap the rookie datasets and return couldabeens
couldabeens_bootstrapped <- function(){
# Obtain bootstrapped rookies
boot_pit_rkes <- sample_n(pit_rkes, size = nrow(pit_rkes))
boot_pos_rkes <- sample_n(pos_rkes, size = nrow(pos_rkes))
# Get thresholds in each year
pit_thresholds <- find_thresholds(boot_pit_rkes)
pos_thresholds <- find_thresholds(boot_pos_rkes)
# See and record which players cross that year's adjusted threshold from rookie players
pit_ret <- compare_thresholds(pit_ret, pit_thresholds)
pos_ret <- compare_thresholds(pos_ret, pos_thresholds)
# Get couldabeen retirees
couldabeens <- count_cbns(rbind(pit_ret,pos_ret))
# Append number of retirees that year
couldabeens <- cbind(couldabeens, num_retirees)
# Find and append proportion of couldabeens : retirees
couldabeens <- couldabeens %>% mutate(prop = cbns/retirees)
# Return dataframe
couldabeens
}
cbns_B <- couldabeens_bootstrapped()
View(cbns_B)
plot_props_linear(cbns_B)
coefs <- lm(prop ~ Year, data = cbns_B)$coefficients
plot_props_linear(cbns_B, coefs)
cbns_B <- couldabeens_bootstrapped()
coefs <- lm(prop ~ Year, data = cbns_B)$coefficients
plot_props_linear(cbns_B, coefs)
cbns_B <- couldabeens_bootstrapped()
coefs <- lm(prop ~ Year, data = cbns_B)$coefficients
plot_props_linear(cbns_B, coefs)
# Bootstrap the rookie datasets and return couldabeens
couldabeens_bootstrapped <- function(){
# Obtain bootstrapped rookies
boot_pit_rkes <- sample_n(pit_rkes, size = nrow(pit_rkes))
boot_pos_rkes <- sample_n(pos_rkes, size = nrow(pos_rkes))
# Get thresholds in each year
pit_thresholds <- find_thresholds(boot_pit_rkes)
pos_thresholds <- find_thresholds(boot_pos_rkes)
# See and record which players cross that year's adjusted threshold from rookie players
pit_ret <- compare_thresholds(pit_ret, pit_thresholds)
pos_ret <- compare_thresholds(pos_ret, pos_thresholds)
# Get couldabeen retirees
couldabeens <- count_cbns(rbind(pit_ret,pos_ret))
# Append number of retirees that year
couldabeens <- cbind(couldabeens, num_retirees)
# Find and append proportion of couldabeens : retirees
couldabeens <- couldabeens %>% mutate(prop = cbns/retirees)
# Return dataframe
couldabeens[-c(2,3),]
}
cbns_B <- couldabeens_bootstrapped()
# Setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
#============================#
#       Load Libraries       #
#============================#
# Load libaries
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(moderndive)
library(boot)
library(ggrepel)
library(ISLR)
# Read global header file (imports datasets and does initial wrangling)
source(file = "../R/header_D.R")
# Bootstrap the rookie datasets and return couldabeens
couldabeens_bootstrapped <- function(){
# Obtain bootstrapped rookies
boot_pit_rkes <- sample_n(pit_rkes, size = nrow(pit_rkes))
boot_pos_rkes <- sample_n(pos_rkes, size = nrow(pos_rkes))
# Get thresholds in each year
pit_thresholds <- find_thresholds(boot_pit_rkes)
pos_thresholds <- find_thresholds(boot_pos_rkes)
# See and record which players cross that year's adjusted threshold from rookie players
pit_ret <- compare_thresholds(pit_ret, pit_thresholds)
pos_ret <- compare_thresholds(pos_ret, pos_thresholds)
# Get couldabeen retirees
couldabeens <- count_cbns(rbind(pit_ret,pos_ret))
# Append number of retirees that year
couldabeens <- cbind(couldabeens, num_retirees)
# Find and append proportion of couldabeens : retirees
couldabeens <- couldabeens %>% mutate(prop = cbns/retirees)
# Return dataframe
couldabeens[-c(2,3),]
}
cbns_B <- couldabeens_bootstrapped()
View(cbns_B)
# Bootstrap the rookie datasets and return couldabeens
couldabeens_bootstrapped <- function(){
# Obtain bootstrapped rookies
boot_pit_rkes <- sample_n(pit_rkes, size = nrow(pit_rkes))
boot_pos_rkes <- sample_n(pos_rkes, size = nrow(pos_rkes))
# Get thresholds in each year
pit_thresholds <- find_thresholds(boot_pit_rkes)
pos_thresholds <- find_thresholds(boot_pos_rkes)
# See and record which players cross that year's adjusted threshold from rookie players
pit_ret <- compare_thresholds(pit_ret, pit_thresholds)
pos_ret <- compare_thresholds(pos_ret, pos_thresholds)
# Get couldabeen retirees
couldabeens <- count_cbns(rbind(pit_ret,pos_ret))
# Append number of retirees that year
couldabeens <- cbind(couldabeens, num_retirees)
# Find and append proportion of couldabeens : retirees
couldabeens <- couldabeens %>% mutate(prop = cbns/retirees)
# Return dataframe
couldabeens[,-c(2,3)]
}
cbns_B <- couldabeens_bootstrapped()
View(cbns_B)
cbns_B <- t(cbns_B)
View(cbns_B)
# Bootstrap the rookie datasets and return couldabeens
couldabeens_bootstrapped <- function(){
# Obtain bootstrapped rookies
boot_pit_rkes <- sample_n(pit_rkes, size = nrow(pit_rkes))
boot_pos_rkes <- sample_n(pos_rkes, size = nrow(pos_rkes))
# Get thresholds in each year
pit_thresholds <- find_thresholds(boot_pit_rkes)
pos_thresholds <- find_thresholds(boot_pos_rkes)
# See and record which players cross that year's adjusted threshold from rookie players
pit_ret <- compare_thresholds(pit_ret, pit_thresholds)
pos_ret <- compare_thresholds(pos_ret, pos_thresholds)
# Get couldabeen retirees
couldabeens <- count_cbns(rbind(pit_ret,pos_ret))
# Append number of retirees that year
couldabeens <- cbind(couldabeens, num_retirees)
# Find and append proportion of couldabeens : retirees
couldabeens <- couldabeens %>% mutate(prop = cbns/retirees)
# Return dataframe
couldabeens[,-c(2,3)]
}
# Setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
#============================#
#       Load Libraries       #
#============================#
# Load libaries
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(moderndive)
library(boot)
library(ggrepel)
library(ISLR)
# Read global header file (imports datasets and does initial wrangling)
source(file = "../R/header_D.R")
# Setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
#============================#
#       Load Libraries       #
#============================#
# Load libaries
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(moderndive)
library(ggrepel)
library(ISLR)
# Read global header file (imports datasets and does initial wrangling)
source(file = "../R/header_D.R")
