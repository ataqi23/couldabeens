# Load rookies datasets
df_pit_rkes <- read_csv("data/rookie-pitcher.csv")
df_pos_rkes <- read_csv("data/rookie-position.csv")
# Load retirees datasets
df_pit_ret <- read_csv("data/retirees-pitcher.csv")
df_pos_ret <- read_csv("data/retirees-position.csv")
# Find number of retirees by year
num_retirees <- total_retirees_by_yr(df_pit_ret, df_pos_ret)
num_retirees <- data.frame(retirees = num_retirees$retirees)
#==============================#
#       Position Players       #
#==============================#
# Obtain wrangled datasets
pos_rkes <- wrangle_init(df_pos_rkes)
pos_ret <- wrangle_init(df_pos_ret)
# Get thresholds in each year
pos_rkes_thresholds <- find_thresholds(pos_rkes)
# See and record which players cross that year's threshold
pos_ret <- compare_thresholds(pos_ret, pos_rkes_thresholds)
#==============================#
#        Pitcher Players       #
#==============================#
# Obtain wrangled datasets
pit_rkes <- wrangle_init(df_pit_rkes)
pit_ret <- wrangle_init(df_pit_ret)
# Get thresholds in each year
pit_rkes_thresholds <- find_thresholds(pit_rkes)
# See and record which players cross that year's threshold
pit_ret <- compare_thresholds(pit_ret, pit_rkes_thresholds)
write.csv(pit_ret,"data-report/pit_ret_classified.csv", row.names = F)
write.csv(pos_ret,"data-report/pos_ret_classified.csv", row.names = F)
# Density plot of rookie and retired pitchers
pitcher_density <- ggplot() +
geom_density(data = pit_ret, aes_string(x = "WAR"), color = "salmon") +
geom_density(data = pit_rkes, aes_string(x = "WAR"), color = "skyblue3") +
geom_vline(xintercept = median(pit_rkes$WAR), color = "skyblue3") +
labs(title = "Pitchers")
# Density plot of rookie position players and retired position players
position_density <- ggplot() +
geom_density(data = pos_ret, aes_string(x = "WAR"), color = "salmon") +
geom_density(data = pos_rkes, aes_string(x = "WAR"), color = "skyblue3") +
geom_vline(xintercept = median(pos_rkes$WAR), color = "skyblue3") +
labs(title = "Position")
# Plot
if(bplot){grid.arrange(pitcher_density, position_density, nrow = 2)}
#===================================#
#        Counting: Couldabeens      #
#===================================#
# Combine the threshold-classified retiree datasets
retirees <- rbind(pit_ret,pos_ret)
# Count couldabeens
couldabeens <- count_cbns(retirees)
head(retirees)
if(bhead){head(couldabeens)}
# Partition retirees into pre-rule and post-rule era
retirees_pre <- prerule(retirees)
retirees_post <- postrule(retirees)
# On the retirees pre-rule dataset
if(bplot){plot_logmodel(retirees_pre, "Retirees Above and Below Threshold (Pre-rule)")}
model_log <- logistic_model(retirees_pre)
if(bloud){summary(model_log)}
# On the retirees pre-rule dataset
dataset <- retirees_post
if(bplot){plot_logmodel(dataset, "Retirees Above and Below Threshold (Post-rule)")}
model_log <- logistic_model(dataset)
if(bloud){summary(model_log)}
#===================================#
#      Proportions: Couldabeens     #
#===================================#
# Find number of retirees by year
num_retirees <- total_retirees_by_yr(df_pit_ret, df_pos_ret)
num_retirees <- data.frame(retirees = num_retirees$retirees)
# Append number of retirees that year
couldabeens <- cbind(couldabeens, num_retirees)
# Find proportion of couldabeens : retirees
couldabeens <- couldabeens %>% mutate(prop = cbns/retirees)
if(bhead){head(couldabeens)}
#==================#
#     Modeling     #
#==================#
# Partition dataset into years before and after rule
couldabeens_pre <- prerule(couldabeens)
couldabeens_post <- postrule(couldabeens)
# Obtain linear model for pre-rule years
model_pre <- linear_model(couldabeens_pre)
coefs_pre <- model_pre$coefficients
# Obtain linear model for post-rule years
model_post <- linear_model(couldabeens_post)
coefs_post <- model_post$coefficients
# Obtain linear model for all years
model_comp <- linear_model(couldabeens)
coefs_comp <- model_comp$coefficients
## + geom_abline(slope = coefs_comp[2], intercept = coefs_comp[1], color = col) +
if(bloud){summary(model_comp)}
col <- "violet"
col1 <- "salmon"
col2 <- "skyblue2"
# Plot proportion of couldabeens in post-rule era ()
plot_comp <- scatter_props(couldabeens, title = "Proportion of Couldabeen Retirees") +
geom_abline(slope = coefs_comp[2], intercept = coefs_comp[1], color = col) +
geom_point(data = couldabeens_pre, mapping = aes(x = Year, y = prop), color = col1) +
geom_abline(slope = coefs_pre[2], intercept = coefs_pre[1], color = col1) +
geom_point(data = couldabeens_post, mapping = aes(x = Year, y = prop),color = col2) +
geom_abline(slope = coefs_post[2], intercept = coefs_post[1], color = col2) +
labs(y = "Proportion")
plot_comp
if(bloud){summary(model_pre)}
# Plot proportion of couldabeens in pre-rule era ()
plot_pre <- plot_props_linear(couldabeens_pre, coefs_pre, color = "salmon",
title = "Proportion of Couldabeen Retirees (1969-2002)")
plot_pre
if(bloud){summary(model_post)}
# Plot proportion of couldabeens in post-rule era ()
plot_post <- plot_props_linear(couldabeens_post, coefs_post, color = "skyblue2",
title = "Proportion of Couldabeen Retirees (2003-2018)")
plot_post
## Smooth out the coefficient instability by potentially using adjacent year median information to stabliize the threshold value. Potentially add a weight vector to stabilize accordingly. Try 1-2 adjcenent year information, considering edge cases on the boundary (5 forward on left edge and 5 behind on right edge)
# Create list of datasets for ease of function input
ls_datasets <- list(df_pos_rkes, df_pos_ret, df_pit_rkes, df_pit_ret, num_retirees)
# Obtain number of couldabeens given some threshold (in standard deviations)
#couldabeens <- couldabeens_by_threshold(ls_datasets, threshold = 0)
# Simpler implementation?
#plot + stat_smooth(mapping = aes(x = Year, y = prop), data = couldabeens_post, method = "lm", formula = prop ~ Year, se = F)
#pitchers <- df_pit_rkes
#pitchers1 <- drop_na(pitchers)
#pitchers1_trn <- pitchers1 %>% sample_frac(0.7)
#pitchers1_tst <- pitchers1 %>% anti_join(pitchers1_trn)
#library(leaps)
#ss1 <- regsubsets(WAR~. - Rk - Player, data = pitchers1_trn, nvmax = 49, method = "forward")
wrangle_lm <- function(dataset){
dataset[,-c(1,2,5,6,7,8,25,26)] %>% drop_na()
}
dataset <- wrangle_lm(df_pit_rkes)
linear_model <- lm(WAR ~ ., data = dataset)
summary(linear_model)
View(dataset)
View(dataset)
wrangle_lm <- function(dataset){
dataset[,-c(1,2,5,6,7,8,25,26)] %>% drop_na()
}
dataset <- wrangle_lm(df_pit_rkes)
select_vars <- function(dataset){
dataset[,c(1,3,4,7,11,12,13,14,19,26,30,32,37,38,40)] %>% drop_na()
}
dataset <- select_vars(df_pit_rkes)
View(dataset)
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(ISLR)
# load helper scripts
source(file = "R/wrangle.R")
source(file = "R/model.R")
source(file = "R/visualization.R")
source(file = "R/threshold.R")
# global parameters
bplot <- T
bloud <- T
bhead <- T
#=============================#
#       Import Datasets       #
#=============================#
# Load rookies datasets
df_pit_rkes <- read_csv("data/rookie-pitcher.csv")
df_pos_rkes <- read_csv("data/rookie-position.csv")
# Load retirees datasets
df_pit_ret <- read_csv("data/retirees-pitcher.csv")
df_pos_ret <- read_csv("data/retirees-position.csv")
# Find number of retirees by year
num_retirees <- total_retirees_by_yr(df_pit_ret, df_pos_ret)
num_retirees <- data.frame(retirees = num_retirees$retirees)
#==============================#
#       Position Players       #
#==============================#
# Obtain wrangled datasets
pos_rkes <- wrangle_init(df_pos_rkes)
pos_ret <- wrangle_init(df_pos_ret)
# Get thresholds in each year
pos_rkes_thresholds <- find_thresholds(pos_rkes)
# See and record which players cross that year's threshold
pos_ret <- compare_thresholds(pos_ret, pos_rkes_thresholds)
#==============================#
#        Pitcher Players       #
#==============================#
# Obtain wrangled datasets
pit_rkes <- wrangle_init(df_pit_rkes)
pit_ret <- wrangle_init(df_pit_ret)
# Get thresholds in each year
pit_rkes_thresholds <- find_thresholds(pit_rkes)
# See and record which players cross that year's threshold
pit_ret <- compare_thresholds(pit_ret, pit_rkes_thresholds)
write.csv(pit_ret,"data-report/pit_ret_classified.csv", row.names = F)
write.csv(pos_ret,"data-report/pos_ret_classified.csv", row.names = F)
# Density plot of rookie and retired pitchers
pitcher_density <- ggplot() +
geom_density(data = pit_ret, aes_string(x = "WAR"), color = "salmon") +
geom_density(data = pit_rkes, aes_string(x = "WAR"), color = "skyblue3") +
geom_vline(xintercept = median(pit_rkes$WAR), color = "skyblue3") +
labs(title = "Pitchers")
# Density plot of rookie position players and retired position players
position_density <- ggplot() +
geom_density(data = pos_ret, aes_string(x = "WAR"), color = "salmon") +
geom_density(data = pos_rkes, aes_string(x = "WAR"), color = "skyblue3") +
geom_vline(xintercept = median(pos_rkes$WAR), color = "skyblue3") +
labs(title = "Position")
# Plot
if(bplot){grid.arrange(pitcher_density, position_density, nrow = 2)}
#===================================#
#        Counting: Couldabeens      #
#===================================#
# Combine the threshold-classified retiree datasets
retirees <- rbind(pit_ret,pos_ret)
# Count couldabeens
couldabeens <- count_cbns(retirees)
head(retirees)
if(bhead){head(couldabeens)}
# Partition retirees into pre-rule and post-rule era
retirees_pre <- prerule(retirees)
retirees_post <- postrule(retirees)
# On the retirees pre-rule dataset
if(bplot){plot_logmodel(retirees_pre, "Retirees Above and Below Threshold (Pre-rule)")}
model_log <- logistic_model(retirees_pre)
if(bloud){summary(model_log)}
# On the retirees pre-rule dataset
dataset <- retirees_post
if(bplot){plot_logmodel(dataset, "Retirees Above and Below Threshold (Post-rule)")}
model_log <- logistic_model(dataset)
if(bloud){summary(model_log)}
#===================================#
#      Proportions: Couldabeens     #
#===================================#
# Find number of retirees by year
num_retirees <- total_retirees_by_yr(df_pit_ret, df_pos_ret)
num_retirees <- data.frame(retirees = num_retirees$retirees)
# Append number of retirees that year
couldabeens <- cbind(couldabeens, num_retirees)
# Find proportion of couldabeens : retirees
couldabeens <- couldabeens %>% mutate(prop = cbns/retirees)
if(bhead){head(couldabeens)}
#==================#
#     Modeling     #
#==================#
# Partition dataset into years before and after rule
couldabeens_pre <- prerule(couldabeens)
couldabeens_post <- postrule(couldabeens)
# Obtain linear model for pre-rule years
model_pre <- linear_model(couldabeens_pre)
coefs_pre <- model_pre$coefficients
# Obtain linear model for post-rule years
model_post <- linear_model(couldabeens_post)
coefs_post <- model_post$coefficients
# Obtain linear model for all years
model_comp <- linear_model(couldabeens)
coefs_comp <- model_comp$coefficients
## + geom_abline(slope = coefs_comp[2], intercept = coefs_comp[1], color = col) +
if(bloud){summary(model_comp)}
col <- "violet"
col1 <- "salmon"
col2 <- "skyblue2"
# Plot proportion of couldabeens in post-rule era ()
plot_comp <- scatter_props(couldabeens, title = "Proportion of Couldabeen Retirees") +
geom_abline(slope = coefs_comp[2], intercept = coefs_comp[1], color = col) +
geom_point(data = couldabeens_pre, mapping = aes(x = Year, y = prop), color = col1) +
geom_abline(slope = coefs_pre[2], intercept = coefs_pre[1], color = col1) +
geom_point(data = couldabeens_post, mapping = aes(x = Year, y = prop),color = col2) +
geom_abline(slope = coefs_post[2], intercept = coefs_post[1], color = col2) +
labs(y = "Proportion")
plot_comp
if(bloud){summary(model_pre)}
# Plot proportion of couldabeens in pre-rule era ()
plot_pre <- plot_props_linear(couldabeens_pre, coefs_pre, color = "salmon",
title = "Proportion of Couldabeen Retirees (1969-2002)")
plot_pre
if(bloud){summary(model_post)}
# Plot proportion of couldabeens in post-rule era ()
plot_post <- plot_props_linear(couldabeens_post, coefs_post, color = "skyblue2",
title = "Proportion of Couldabeen Retirees (2003-2018)")
plot_post
## Smooth out the coefficient instability by potentially using adjacent year median information to stabliize the threshold value. Potentially add a weight vector to stabilize accordingly. Try 1-2 adjcenent year information, considering edge cases on the boundary (5 forward on left edge and 5 behind on right edge)
# Create list of datasets for ease of function input
ls_datasets <- list(df_pos_rkes, df_pos_ret, df_pit_rkes, df_pit_ret, num_retirees)
# Obtain number of couldabeens given some threshold (in standard deviations)
#couldabeens <- couldabeens_by_threshold(ls_datasets, threshold = 0)
# Simpler implementation?
#plot + stat_smooth(mapping = aes(x = Year, y = prop), data = couldabeens_post, method = "lm", formula = prop ~ Year, se = F)
#pitchers <- df_pit_rkes
#pitchers1 <- drop_na(pitchers)
#pitchers1_trn <- pitchers1 %>% sample_frac(0.7)
#pitchers1_tst <- pitchers1 %>% anti_join(pitchers1_trn)
#library(leaps)
#ss1 <- regsubsets(WAR~. - Rk - Player, data = pitchers1_trn, nvmax = 49, method = "forward")
wrangle_lm <- function(dataset){
dataset[,-c(1,2,5,6,7,8,25,26)] %>% drop_na()
}
dataset <- wrangle_lm(df_pit_rkes)
select_vars <- function(dataset){
dataset[,c(1,3,4,7,11,12,13,14,19,26,30,32,37,38,40)] %>% drop_na()
}
dataset <- select_vars(dataset)
View(dataset)
linear_model <- lm(WAR ~ ., data = dataset)
summary(linear_model)
# remove troublesome variables
wrangle_lm <- function(dataset){
dataset[,-c(1,2,5,6,7,8,25,26)] %>% drop_na()
}
dataset <- wrangle_lm(df_pit_rkes)
# select significant variables
select_vars <- function(dataset){
dataset[,c(1,3,4,7,11,12,13,14,19,26,30,32,37,38,40)] %>% drop_na()
}
dataset <- select_vars(dataset)
linear_model <- lm(WAR ~ ., data = dataset)
summary(linear_model)
View(dataset)
# remove troublesome variables
wrangle_lm <- function(dataset){
dataset[,-c(1,2,5,6,7,8,25,26)] %>% drop_na()
}
dataset <- wrangle_lm(df_pit_rkes)
# select significant variables
select_vars <- function(dataset){
dataset[,c(1,3,4,7,11,12,13,14,19,26,30,32,37,38,40)] %>% drop_na()
}
dataset_sel <- select_vars(dataset)
View(dataset_sel)
View(dataset)
# remove troublesome variables
wrangle_lm <- function(dataset){
dataset[,-c(1,2,5,6,7,8,25,26)] %>% drop_na()
}
dataset <- wrangle_lm(df_pit_rkes)
# select significant variables
select_vars <- function(dataset){
dataset[,c(1,3,4,12,13,14,19,26,30,32,37,38,40)] %>% drop_na()
}
dataset_sel <- select_vars(dataset)
linear_model <- lm(WAR ~ ., data = dataset_sel)
summary(linear_model)
# remove troublesome variables
wrangle_lm <- function(dataset){
dataset[,-c(1,2,5,6,7,8,25,26)] %>% drop_na()
}
dataset <- wrangle_lm(df_pit_rkes)
# select significant variables
select_vars <- function(dataset){
dataset[,c(1,3,4,12,13,14,19,26,30,32,37,38,40)] %>% drop_na()
}
pitchers <- select_vars(dataset)
pitchers_trn <-  pitchers %>% sample_frac(0.7)
pitchers_trn <-  pitchers %>% sample_frac(0.7)
pitchers_tst <- pitchers %>% anti_join(pitchers_trn)
predictions <- predict(linear_model, pitchers_tst)
predictions <- predict(linear_model, pitchers_tst)
test_MSE <- predictions - pitchers_tst$WAR
predictions <- predict(linear_model, pitchers_tst)
test_MSE <- mean(predictions - pitchers_tst$WAR)^2
View(pitchers_tst)
predictions <- predict(linear_model, pitchers_tst)
test_MSE <- mean(predictions - pitchers_tst$WAR)^2
test_MSE
linear_model <- lm(WAR ~ ., data = dataset_sel)
summary(linear_model)
linear_model <- lm(WAR ~ ., data = dataset_sel)
summary(linear_model)
plot(linear_model)
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(knitr)
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(ISLR)
# load helper scripts
source(file = "R/wrangle.R")
source(file = "R/model.R")
source(file = "R/visualization.R")
source(file = "R/threshold.R")
# global parameters
bplot <- T
bloud <- T
bhead <- T
include_graphics("data-gen/coef.jpeg")
coef_array <- read.csv(file = "../data-gen/coefarray.csv")
coef_plot <- ggplot(data = coef_array) +
geom_smooth(mapping = aes(x = threshold, y = coef_yr, color = era), se = F) +
geom_point(mapping = aes(x = threshold, y = coef_yr, color = era))
coef_plot
stack <- read_csv("stack.csv")
stack <- read_csv("../data-gen/stack.csv")
# Partition dataset into years before and after rule
stack_pre <- prerule(stack)
stack_post <- postrule(stack)
# Stack of Threshold plots
if(bplot){
plot_all <- plot_stack(stack, "Proportion of Retired Couldabeens (Variable Classification Threshold)")
plot_pre <- plot_stack(stack_pre,
"Proportion of Retired Couldabeens (Pre-Rule Era)")
plot_post <- plot_stack(stack_post,
"Proportion of Retired Couldabeens (Post-Rule Era)")
# Animations
animation_pre <- plot_pre + transition_time(time = threshold)
# Uncomment the line below and run this chunk to view animation of post-rule thresholds
#animation_pre
animation_post <- plot_post + transition_time(time = threshold)
}
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 3, fig.width = 4.5)
# load libaries
library(knitr)
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(ISLR)
# load helper scripts
source(file = "R/wrangle.R")
source(file = "R/model.R")
source(file = "R/visualization.R")
source(file = "R/threshold.R")
# global parameters
bplot <- T
bloud <- F
bhead <- T
# Load rookies datasets
df_pit_rkes <- read_csv("data/rookie-pitcher.csv")
df_pos_rkes <- read_csv("data/rookie-position.csv")
# Load retirees datasets
df_pit_ret <- read_csv("data/retirees-pitcher.csv")
df_pos_ret <- read_csv("data/retirees-position.csv")
# Find number of retirees by year
num_retirees <- total_retirees_by_yr(df_pit_ret, df_pos_ret)
num_retirees <- data.frame(retirees = num_retirees$retirees)
# Create list of datasets for ease of function input
ls_datasets <- list(df_pos_rkes, df_pos_ret, df_pit_rkes, df_pit_ret, num_retirees)
# Obtain number of couldabeens
couldabeens <- couldabeens_by_threshold(ls_datasets)
# Obtain wrangled rookie datasets
pit_rkes <- wrangle_init(df_pit_rkes)
pos_rkes <- wrangle_init(df_pos_rkes)
# read in the classified retiree data
pos_ret <- read_csv("data-gen/pos_ret_classified.csv")
pit_ret <- read_csv("data-gen/pit_ret_classified.csv")
# combine them into one dataframe
retirees <- prep_booleans(rbind(pos_ret, pit_ret))
# Density plot of rookie and retired pitchers
pitcher_density <- ggplot() +
geom_density(data = pit_ret, aes_string(x = "WAR"), color = "salmon") +
geom_density(data = pit_rkes, aes_string(x = "WAR"), color = "skyblue3") +
geom_vline(xintercept = median(pit_rkes$WAR), color = "skyblue3") +
labs(title = "Pitchers")
# Density plot of rookie position players and retired position players
position_density <- ggplot() +
geom_density(data = pos_ret, aes_string(x = "WAR"), color = "salmon") +
geom_density(data = pos_rkes, aes_string(x = "WAR"), color = "skyblue3") +
geom_vline(xintercept = median(pos_rkes$WAR), color = "skyblue3") +
labs(title = "Position")
# Plot
if(bplot){grid.arrange(pitcher_density, position_density, nrow = 2)}
# Partition retirees into pre-rule and post-rule era
retirees_pre <- prerule(retirees)
retirees_post <- postrule(retirees)
# On the retirees pre-rule dataset
if(bplot){plot_logmodel(retirees_pre)}
model_log <- logistic_model(retirees_pre)
# On the retirees pre-rule dataset
if(bplot){plot_logmodel(retirees_post)}
model_log <- logistic_model(retirees_post)
# Partition dataset into years before and after rule
couldabeens_pre <- prerule(couldabeens)
couldabeens_post <- postrule(couldabeens)
# Obtain linear model for pre-rule years
model_pre <- lm(formula = prop ~ I(Year), data = couldabeens_pre)
coefs_pre <- model_pre$coefficients
# Plot proportion of couldabeens in pre-rule era ()
plot_props_linear(couldabeens_pre, coefs_pre,
color = "salmon", title = "Proportion of Couldabeen Retirees")
# Obtain linear model for post-rule years
model_post <- lm(formula = prop ~ I(Year), data = couldabeens_post)
coefs_post <- model_post$coefficients
# Plot proportion of couldabeens in post-rule era ()
plot_props_linear(couldabeens_post, coefs_post,
color = "skyblue2", title = "Proportion of Couldabeen Retirees")
# Obtain linear model for all years
model_comp <- lm(formula = prop ~ I(Year), data = couldabeens)
coefs_comp <- model_comp$coefficients
col <- "mediumvioletred"
col1 <- "salmon"
col2 <- "skyblue2"
# Plot proportion of couldabeens in post-rule era ()
scatter_props(couldabeens, title = "Proportion of Couldabeen Retirees") +
geom_abline(slope = coefs_comp[2], intercept = coefs_comp[1], color = col) +
geom_point(data = couldabeens_pre, mapping = aes(x = Year, y = prop), color = col1) +
geom_abline(slope = coefs_pre[2], intercept = coefs_pre[1], color = col1) +
geom_point(data = couldabeens_post, mapping = aes(x = Year, y = prop),color = col2) +
geom_abline(slope = coefs_post[2], intercept = coefs_post[1], color = col2) +
labs(y = "Proportion")
include_graphics("data-gen/coef.jpeg")
# On the retirees pre-rule dataset
if(bplot){plot_logmodel(retirees_post)}
model_log <- logistic_model(retirees_post)
summary(model_log)
# On the retirees pre-rule dataset
if(bplot){plot_logmodel(retirees_pre)}
model_log <- logistic_model(retirees_pre)
summary(model_log)
