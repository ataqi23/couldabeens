}
if(run_stack){
# Coefficients in a threshold stack
coef_array <- coefs_by_stack(stack, threshold_vec)
write.csv(coef_array,paste("coef_array",curr_string,".csv",sep=""), row.names = FALSE)
} else{
coef_array <- read_csv(paste("coef_array",curr_string,".csv",sep=""))
}
# Plot the coefficients against the varying thresholds
coef_plot <- ggplot(data = coef_array) +
geom_smooth(mapping = aes(x = threshold, y = coef_yr, color = era), se = F) +
geom_point(mapping = aes(x = threshold, y = coef_yr, color = era))
coef_plot
# setup chunks
knitr::opts_chunk$set(echo = FALSE, fig.align = "center", warning = F, message = F)
# load libaries
library(tidyverse)
library(grid)
library(patchwork)
library(ISLR)
library(gganimate)
# load helper scripts
source(file = "../R/wrangle.R")
source(file = "../R/model.R")
source(file = "../R/threshold.R")
source(file = "../R/visualization.R")
# global parameters
bplot <- F
#=============================#
#       Import Datasets       #
#=============================#
# Load rookies datasets
pit_rkes <- read_csv("../data/rookie-pitcher.csv")
pos_rkes <- read_csv("../data/rookie-position.csv")
# Load retirees datasets
pit_ret <- read_csv("../data/retirees-pitcher.csv")
pos_ret <- read_csv("../data/retirees-position.csv")
# Find number of retirees by year
num_retirees <- total_retirees_by_yr(pit_ret, pos_ret)
num_retirees <- data.frame(retirees = num_retirees$retirees)
# Aggregate datasets to compute couldabeens
ls_datasets <- list(pos_rkes, pos_ret, pit_rkes, pit_ret, num_retirees)
# Create vector of thresholds to be analyzed
threshold_vec <- data.frame(threshold = seq(-1,2,by=0.05))
# Run a new stack
run_stack <- T
curr_string <- "_2_033"
# Create corrosponding stack of couldabeens under variable threshold
if(run_stack){
stack <- create_threshold_stack(ls_datasets, threshold_vec, w = 2, center_weight = 0.33)
write.csv(stack, paste("stack",curr_string,".csv",sep=""), row.names = FALSE)
} else{
stack <- read_csv(paste("stack",curr_string,".csv",sep=""))
}
if(run_stack){
# Coefficients in a threshold stack
coef_array <- coefs_by_stack(stack, threshold_vec)
write.csv(coef_array,paste("coef_array",curr_string,".csv",sep=""), row.names = FALSE)
} else{
coef_array <- read_csv(paste("coef_array",curr_string,".csv",sep=""))
}
# Plot the coefficients against the varying thresholds
coef_plot <- ggplot(data = coef_array) +
geom_smooth(mapping = aes(x = threshold, y = coef_yr, color = era), se = F) +
geom_point(mapping = aes(x = threshold, y = coef_yr, color = era))
coef_plot
View(stack)
# setup chunks
knitr::opts_chunk$set(echo = FALSE, fig.align = "center", warning = F, message = F)
# load libaries
library(tidyverse)
library(grid)
library(patchwork)
library(ISLR)
library(gganimate)
# load helper scripts
source(file = "../R/wrangle.R")
source(file = "../R/model.R")
source(file = "../R/threshold.R")
source(file = "../R/visualization.R")
# global parameters
bplot <- F
#=============================#
#       Import Datasets       #
#=============================#
# Load rookies datasets
pit_rkes <- read_csv("../data/rookie-pitcher.csv")
pos_rkes <- read_csv("../data/rookie-position.csv")
# Load retirees datasets
pit_ret <- read_csv("../data/retirees-pitcher.csv")
pos_ret <- read_csv("../data/retirees-position.csv")
# Find number of retirees by year
num_retirees <- total_retirees_by_yr(pit_ret, pos_ret)
num_retirees <- data.frame(retirees = num_retirees$retirees)
# Aggregate datasets to compute couldabeens
ls_datasets <- list(pos_rkes, pos_ret, pit_rkes, pit_ret, num_retirees)
# Create vector of thresholds to be analyzed
threshold_vec <- data.frame(threshold = seq(-1,2,by=0.05))
# Run a new stack
run_stack <- T
curr_string <- "_1_04"
# Create corrosponding stack of couldabeens under variable threshold
if(run_stack){
stack <- create_threshold_stack(ls_datasets, threshold_vec, w = 1, center_weight = 0.4)
write.csv(stack, paste("stack",curr_string,".csv",sep=""), row.names = FALSE)
} else{
stack <- read_csv(paste("stack",curr_string,".csv",sep=""))
}
if(run_stack){
# Coefficients in a threshold stack
coef_array <- coefs_by_stack(stack, threshold_vec)
write.csv(coef_array,paste("coef_array",curr_string,".csv",sep=""), row.names = FALSE)
} else{
coef_array <- read_csv(paste("coef_array",curr_string,".csv",sep=""))
}
# Plot the coefficients against the varying thresholds
coef_plot <- ggplot(data = coef_array) +
geom_smooth(mapping = aes(x = threshold, y = coef_yr, color = era), se = F) +
geom_point(mapping = aes(x = threshold, y = coef_yr, color = era))
coef_plot
# setup chunks
knitr::opts_chunk$set(echo = FALSE, fig.align = "center", warning = F, message = F)
# load libaries
library(tidyverse)
library(grid)
library(patchwork)
library(ISLR)
library(gganimate)
library(gridExtra)
# load helper scripts
source(file = "../R/wrangle.R")
source(file = "../R/model.R")
source(file = "../R/threshold.R")
source(file = "../R/visualization.R")
# global parameters
bplot <- F
grid.arrange(coef_plot1, coef_plot2, coef_plot3)
# setup chunks
knitr::opts_chunk$set(echo = FALSE, fig.align = "center", warning = F, message = F)
# load libaries
library(tidyverse)
library(grid)
library(patchwork)
library(ISLR)
library(gganimate)
library(gridExtra)
# load helper scripts
source(file = "../R/wrangle.R")
source(file = "../R/model.R")
source(file = "../R/threshold.R")
source(file = "../R/visualization.R")
# global parameters
bplot <- F
#=============================#
#       Import Datasets       #
#=============================#
# Load rookies datasets
pit_rkes <- read_csv("../data/rookie-pitcher.csv")
pos_rkes <- read_csv("../data/rookie-position.csv")
# Load retirees datasets
pit_ret <- read_csv("../data/retirees-pitcher.csv")
pos_ret <- read_csv("../data/retirees-position.csv")
# Find number of retirees by year
num_retirees <- total_retirees_by_yr(pit_ret, pos_ret)
num_retirees <- data.frame(retirees = num_retirees$retirees)
# Aggregate datasets to compute couldabeens
ls_datasets <- list(pos_rkes, pos_ret, pit_rkes, pit_ret, num_retirees)
# Create vector of thresholds to be analyzed
threshold_vec <- data.frame(threshold = seq(-1,2,by=0.05))
# Run a new stack
run_stack <- F
curr_string <- "_1_04"
# Create corrosponding stack of couldabeens under variable threshold
if(run_stack){
stack <- create_threshold_stack(ls_datasets, threshold_vec, w = 1, center_weight = 0.4)
write.csv(stack, paste("stack",curr_string,".csv",sep=""), row.names = FALSE)
} else{
stack <- read_csv(paste("stack",curr_string,".csv",sep=""))
}
if(run_stack){
# Coefficients in a threshold stack
coef_array <- coefs_by_stack(stack, threshold_vec)
write.csv(coef_array,paste("coef_array",curr_string,".csv",sep=""), row.names = FALSE)
} else{
coef_array <- read_csv(paste("coef_array",curr_string,".csv",sep=""))
}
# Plot the coefficients against the varying thresholds
coef_plot <- ggplot(data = coef_array) +
geom_smooth(mapping = aes(x = threshold, y = coef_yr, color = era), se = F) +
geom_point(mapping = aes(x = threshold, y = coef_yr, color = era))
#coef_plot
curr_string <- "_1_04"
coef_array <- read_csv(paste("coef_array",curr_string,".csv",sep=""))
# Plot the coefficients against the varying thresholds
coef_plot1 <- ggplot(data = coef_array) +
geom_smooth(mapping = aes(x = threshold, y = coef_yr, color = era), se = F) +
geom_point(mapping = aes(x = threshold, y = coef_yr, color = era))
if(bplot){coef_plot1}
curr_string <- "_1_05"
coef_array <- read_csv(paste("coef_array",curr_string,".csv",sep=""))
# Plot the coefficients against the varying thresholds
coef_plot2 <- ggplot(data = coef_array) +
geom_smooth(mapping = aes(x = threshold, y = coef_yr, color = era), se = F) +
geom_point(mapping = aes(x = threshold, y = coef_yr, color = era))
if(bplot){coef_plot2}
curr_string <- "_2_033"
coef_array <- read_csv(paste("coef_array",curr_string,".csv",sep=""))
# Plot the coefficients against the varying thresholds
coef_plot3 <- ggplot(data = coef_array) +
geom_smooth(mapping = aes(x = threshold, y = coef_yr, color = era), se = F) +
geom_point(mapping = aes(x = threshold, y = coef_yr, color = era))
if(bplot){coef_plot3}
grid.arrange(coef_plot1, coef_plot2, coef_plot3)
# setup chunks
knitr::opts_chunk$set(echo = FALSE, fig.align = "center", warning = F, message = F)
# load libaries
library(tidyverse)
library(grid)
library(patchwork)
library(ISLR)
library(gganimate)
library(gridExtra)
# load helper scripts
source(file = "../R/wrangle.R")
source(file = "../R/model.R")
source(file = "../R/threshold.R")
source(file = "../R/visualization.R")
# global parameters
bplot <- F
#=============================#
#       Import Datasets       #
#=============================#
# Load rookies datasets
pit_rkes <- read_csv("../data/rookie-pitcher.csv")
pos_rkes <- read_csv("../data/rookie-position.csv")
# Load retirees datasets
pit_ret <- read_csv("../data/retirees-pitcher.csv")
pos_ret <- read_csv("../data/retirees-position.csv")
# Find number of retirees by year
num_retirees <- total_retirees_by_yr(pit_ret, pos_ret)
num_retirees <- data.frame(retirees = num_retirees$retirees)
# Aggregate datasets to compute couldabeens
ls_datasets <- list(pos_rkes, pos_ret, pit_rkes, pit_ret, num_retirees)
# Create vector of thresholds to be analyzed
threshold_vec <- data.frame(threshold = seq(-1,2,by=0.05))
# Run a new stack
run_stack <- T
curr_string <- "_2_02"
# Create corrosponding stack of couldabeens under variable threshold
if(run_stack){
stack <- create_threshold_stack(ls_datasets, threshold_vec, w = 2, center_weight = 0.2)
write.csv(stack, paste("stack",curr_string,".csv",sep=""), row.names = FALSE)
} else{
stack <- read_csv(paste("stack",curr_string,".csv",sep=""))
}
if(run_stack){
# Coefficients in a threshold stack
coef_array <- coefs_by_stack(stack, threshold_vec)
write.csv(coef_array,paste("coef_array",curr_string,".csv",sep=""), row.names = FALSE)
} else{
coef_array <- read_csv(paste("coef_array",curr_string,".csv",sep=""))
}
# Plot the coefficients against the varying thresholds
coef_plot <- ggplot(data = coef_array) +
geom_smooth(mapping = aes(x = threshold, y = coef_yr, color = era), se = F) +
geom_point(mapping = aes(x = threshold, y = coef_yr, color = era))
#coef_plot
curr_string <- "_1_04"
coef_array <- read_csv(paste("coef_array",curr_string,".csv",sep=""))
# Plot the coefficients against the varying thresholds
coef_plot1 <- ggplot(data = coef_array) +
geom_smooth(mapping = aes(x = threshold, y = coef_yr, color = era), se = F) +
geom_point(mapping = aes(x = threshold, y = coef_yr, color = era))
if(bplot){coef_plot1}
curr_string <- "_1_05"
coef_array <- read_csv(paste("coef_array",curr_string,".csv",sep=""))
# Plot the coefficients against the varying thresholds
coef_plot2 <- ggplot(data = coef_array) +
geom_smooth(mapping = aes(x = threshold, y = coef_yr, color = era), se = F) +
geom_point(mapping = aes(x = threshold, y = coef_yr, color = era))
if(bplot){coef_plot2}
curr_string <- "_2_033"
coef_array <- read_csv(paste("coef_array",curr_string,".csv",sep=""))
# Plot the coefficients against the varying thresholds
coef_plot3 <- ggplot(data = coef_array) +
geom_smooth(mapping = aes(x = threshold, y = coef_yr, color = era), se = F) +
geom_point(mapping = aes(x = threshold, y = coef_yr, color = era))
if(bplot){coef_plot3}
grid.arrange(coef_plot1, coef_plot2, coef_plot3)
# Stack of Threshold plots
#if(bplot){
#plot_all <- plot_stack(stack, "Proportion of Retired Couldabeens (Variable Classification Threshold)")
#plot_pre <- plot_stack(stack_pre, "Proportion of Retired Couldabeens (Pre-Rule Era)")
#plot_post <- plot_stack(stack_post, "Proportion of Retired Couldabeens (Post-Rule Era)")
# Animations
#animation_pre <- plot_pre + transition_time(time = threshold)
# Uncomment the line below and run this chunk to view animation of post-rule thresholds
#animation_pre
#animation_post <- plot_post + transition_time(time = threshold)
#}
View(stack)
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(tidyverse)
library(grid)
library(gridExtra)
library(patchwork)
library(ISLR)
library(factoextra)
# load helper scripts
source(file = "../R/wrangle.R")
source(file = "../R/model.R")
source(file = "../R/visualization.R")
source(file = "../R/threshold.R")
source(file = "../R/null_threshold.R")
# global parameters
bplot <- T
bloud <- T
bhead <- T
#=============================#
#       Import Datasets       #
#=============================#
# Load rookies datasets
pit_rkes <- read_csv("../data/rookie-pitcher.csv")
pos_rkes <- read_csv("../data/rookie-position.csv")
# Load retirees datasets
pit_ret <- read_csv("../data/retirees-pitcher.csv")
pos_ret <- read_csv("../data/retirees-position.csv")
# Find number of retirees by year
num_retirees <- total_retirees_by_yr(pit_ret, pos_ret)
num_retirees <- data.frame(retirees = num_retirees$retirees)
# Aggregate datasets to compute couldabeens
ls_datasets <- list(pos_rkes, pos_ret, pit_rkes, pit_ret, num_retirees)
# Get couldabeens
couldabeens <- read_csv("../data-gen/couldabeens.csv")
# Get payroll revenue data
payroll_rev <- read_csv("../data/revenue-payroll.csv")
payroll <- find_labShare(payroll_rev)
# Append payroll data in appopriate year (accounting for lag)
couldabeens <- append_payrolls(couldabeens, payroll, lag = 1)
# Create moneyball variable
couldabeens <- couldabeens %>% mutate(postMoneyball = 1 - (Year < 2004))
# Remove unused columns
couldabeens <- couldabeens[-c(3)]
# Split data
couldabeens_pre <- couldabeens[which(couldabeens$postMoneyball == 0),]
couldabeens_post <- couldabeens %>% anti_join(couldabeens_pre)
# Revenue and Labor Share
cor(couldabeens$totRev, couldabeens$labShare)
cor(couldabeens$totRev, couldabeens$totPayroll)
cor(couldabeens$totPayroll, couldabeens$labShare)
ggplot() + geom_point(data = payroll, mapping = aes(x = totRev, y = labShare, color = Year))
ggplot() + geom_point(data = payroll, mapping = aes(x = totRev, y = totPayroll, color = Year))
ggplot() + geom_point(data = payroll, mapping = aes(x = totPayroll, y = labShare, color = Year))
# Choose predictors
prep_lm <- function(dataset, cols_removed){
dataset[-cols_removed]
}
dataset1 <- prep_lm(couldabeens_post, c(3,4,6))
head(dataset1)
lm1 <- lm(prop ~ . - Year, data = dataset1)
summary(lm1)
col1 <- "skyblue3"
ggplot(data = couldabeens_post, mapping = aes(x = prop, y = labShare)) +
geom_point(color = col1) +
geom_smooth(color = col1, se = F, method = "lm")
col1 <- "skyblue3"
ggplot(data = couldabeens_post, mapping = aes(y = prop, x = labShare)) +
geom_point(color = col1) +
geom_smooth(color = col1, se = F, method = "lm")
col1 <- "skyblue3"
ggplot(data = couldabeens_post, mapping = aes(y = Year, x = prop, color = labShare)) +
geom_point() +
geom_smooth(se = F, method = "lm") +
scale_color_gradient(low = "red", high = "lightgreen")
col1 <- "skyblue3"
ggplot(data = couldabeens_post, mapping = aes(x = Year, y = prop, color = labShare)) +
geom_point() +
geom_smooth(se = F, method = "lm") +
scale_color_gradient(low = "red", high = "lightgreen")
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(tidyverse)
library(knitr)
library(grid)
library(gridExtra)
library(patchwork)
library(moderndive)
library(ggrepel)
library(ISLR)
# Read global header file (imports datasets and does initial wrangling)
source(file = "R/header.R")
source(file = "R/presentation.R")
ggplot(couldabeens, aes(x = Year, y = prop, color = factor(postMoneyball))) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(couldabeens_pre, aes(x = Year, y = prop)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = couldabeens_post, mapping = aes(y = prop, x = labShare)) +
geom_point(color = col1) +
geom_smooth(color = col1, se = F, method = "lm")
ggplot(couldabeens_pre, aes(x = Year, y = prop)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = couldabeens_post, mapping = aes(y = prop, x = labShare)) +
geom_point(color = col1) +
geom_smooth(color = col1, se = F, method = "lm")
ggplot(couldabeens_pre, aes(x = Year, y = prop)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(couldabeens, aes(x = Year, y = prop, color = factor(postMoneyball))) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(tidyverse)
library(knitr)
library(grid)
library(gridExtra)
library(patchwork)
library(moderndive)
library(ggrepel)
library(ISLR)
# Read global header file (imports datasets and does initial wrangling)
source(file = "R/header.R")
source(file = "R/presentation.R")
if(bplot){grid.arrange(dens_pit, dens_pos, nrow = 2)}
ggplot(couldabeens, aes(x = Year, y = prop, color = factor(postMoneyball))) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(couldabeens_pre, aes(x = Year, y = prop)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = couldabeens_post, mapping = aes(y = prop, x = labShare)) +
geom_point(color = col1) +
geom_smooth(color = col1, se = F, method = "lm")
# Obtain linear model for all years
model_comp <- lm(formula = prop ~ I(Year), data = couldabeens)
coefs_comp <- model_comp$coefficients
col <- "mediumvioletred"
col1 <- "salmon"
col2 <- "skyblue2"
# Plot proportion of couldabeens in post-rule era ()
scatter_props(couldabeens, title = "Proportion of Couldabeen Retirees") +
geom_abline(slope = coefs_comp[2], intercept = coefs_comp[1], color = col) +
geom_point(data = couldabeens_pre, mapping = aes(x = Year, y = prop), color = col1) +
geom_abline(slope = coefs_pre[2], intercept = coefs_pre[1], color = col1) +
geom_point(data = couldabeens_post, mapping = aes(x = Year, y = prop),color = col2) +
geom_abline(slope = coefs_post[2], intercept = coefs_post[1], color = col2) +
labs(y = "Proportion")
# setup chunks
knitr::opts_chunk$set(echo = F, fig.align = "center", warning = F, message = F, fig.height = 4)
# load libaries
library(tidyverse)
library(knitr)
library(grid)
library(gridExtra)
library(patchwork)
library(moderndive)
library(ggrepel)
library(ISLR)
# Read global header file (imports datasets and does initial wrangling)
source(file = "R/header.R")
source(file = "R/presentation.R")
if(bplot){grid.arrange(dens_pit, dens_pos, nrow = 2)}
ggplot(couldabeens, aes(x = Year, y = prop, color = factor(postMoneyball))) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(couldabeens_pre, aes(x = Year, y = prop)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
ggplot(data = couldabeens_post, mapping = aes(y = prop, x = labShare)) +
geom_point(color = col1) +
geom_smooth(color = col1, se = F, method = "lm")
# Obtain linear model for all years
model_comp <- lm(formula = prop ~ I(Year), data = couldabeens)
coefs_comp <- model_comp$coefficients
col <- "mediumvioletred"
col1 <- "salmon"
col2 <- "skyblue2"
# Plot proportion of couldabeens in post-rule era ()
scatter_props(couldabeens, title = "Proportion of Couldabeen Retirees") +
geom_abline(slope = coefs_comp[2], intercept = coefs_comp[1], color = col) +
geom_point(data = couldabeens_pre, mapping = aes(x = Year, y = prop), color = col1) +
geom_abline(slope = coefs_pre[2], intercept = coefs_pre[1], color = col1) +
geom_point(data = couldabeens_post, mapping = aes(x = Year, y = prop),color = col2) +
geom_abline(slope = coefs_post[2], intercept = coefs_post[1], color = col2) +
labs(y = "Proportion")
# Obtain linear model for all years
coefs_comp <- lm(formula = prop ~ I(Year), data = couldabeens_t)$coefficients
coefs_post <- lm(formula = prop ~ I(Year), data = couldabeens_post)$coefficients
coefs_pre <- lm(formula = prop ~ I(Year), data = couldabeens_pre)$coefficients
col <- "mediumvioletred"
col1 <- "salmon"
col2 <- "skyblue2"
# Plot proportion of couldabeens in post-rule era ()
scatter_props(couldabeens, title = "Proportion of Couldabeen Retirees") +
geom_abline(slope = coefs_comp[2], intercept = coefs_comp[1], color = col) +
geom_point(data = couldabeens_pre, mapping = aes(x = Year, y = prop), color = col1) +
geom_abline(slope = coefs_pre[2], intercept = coefs_pre[1], color = col1) +
geom_point(data = couldabeens_post, mapping = aes(x = Year, y = prop),color = col2) +
geom_abline(slope = coefs_post[2], intercept = coefs_post[1], color = col2) +
labs(y = "Proportion")
ggplot(couldabeens_pre, aes(x = Year, y = prop)) +
geom_point() +
stat_smooth(method = "lm", se = FALSE)
include_graphics("images/coef.jpeg")
include_graphics("images/coef.jpeg")
